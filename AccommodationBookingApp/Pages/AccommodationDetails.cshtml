@page
@model AccommodationBookingApp.Pages.AccommodationDetailsModel
@{ 
    ViewData["Title"] = Model.Accommodation.Name;
}
@{

    <img src="@Model.HeaderPhotoPath" asp-append-version="true" />
    <div class="row">
        @foreach(string imagePath in Model.AccommodationPhotos)
        {
            //cleaning wwwroot prefix
            var imagePathCleaned = imagePath.Remove(0, 7);
            <img src="@imagePathCleaned" />
        }
    </div>
    <div>
        <h4>Accommodation name:</h4>
        <label>@Model.Accommodation.Name</label>
        <h4>Number of beds:</h4>
        <label>@Model.Accommodation.NumberOfBeds</label>
        <h4>City:</h4>
        <label>@Model.Accommodation.City</label>
        <h4>Address</h4>
        <label>@Model.Accommodation.Address</label>
        <h4>Check-in time:</h4>
        <label>@Model.Accommodation.CheckInTime</label>
        <h4>Check-out time:</h4>
        <label>@Model.Accommodation.CheckOutTime</label>
        <h4>Number of beds</h4>
        <label>@Model.Accommodation.NumberOfBeds</label>
        <h4>Price per night</h4>
        <label>@Model.Accommodation.PricePerNight @Model.Accommodation.Currency</label>
    </div>
    @if (User.Identity.IsAuthenticated && (Model.CurrentUser.Id != Model.Accommodation.ApplicationUser.Id))
    {
        <form method="post">
            <h4>Check-in date:</h4>
            <input data-provide="datepicker" asp-for="CheckInDateString" onchange="clickedOnTheCalendar(this.value)" class="checkInDatepicker" autocomplete="off"/>
            <h4>Check-out date:</h4>
            <input data-provide="datepicker" asp-for="CheckOutDateString" class="checkOutDatepicker" autocomplete="off"/>
            <button type="submit">Book</button>
        </form>
    }
    @if (Model.Accommodation.RequireApproval)
    {
        <br />
        <label>This accommodation requires approval from host before booking is finalised</label>
    }
    @if (!User.Identity.IsAuthenticated)
    {
        <h2>Please <a asp-page="/Login">Login</a> or <a asp-page="/Register">Register</a> to book this</h2>
    }

    <script>
        var datesToDisableArray;

        $(document).ready(function () {
            datesToDisableArray = @Html.Raw(Json.Serialize(Model.DatesOccupiedArray));
            let checkInDate = @Html.Raw(Json.Serialize(Model.CheckInDateString));
            let checkOutDate = @Html.Raw(Json.Serialize(Model.CheckOutDateString));

            $('.checkInDatepicker').datepicker({
                timepicker: false,
                datepicker: true,
                format: "dd.mm.yyyy.",
                startDate: checkInDate,
                datesDisabled: datesToDisableArray,
                weekStart: 1
            });
            $('.checkOutDatepicker').datepicker({
                timepicker: false,
                datepicker: true,
                format: "dd.mm.yyyy.",
                startDate: checkOutDate,
                datesDisabled: datesToDisableArray,
                weekStart: 1
            });

            //clear the check-in and check-out date input if dates that are sent as GET request parameters are occupied
            if (typeof datesToDisableArray !== "undefined") {
                if (datesToDisableArray.includes(checkInDate) || datesToDisableArray.contains(checkOutDate)) {
                    $('.checkInDatepicker').datepicker('clearDates');
                    $('.checkOutDatepicker').datepicker('clearDates');
                }
            }
        })

        function clickedOnTheCalendar(dateInput) {
            
            //finds the first booking after the selected check in date and sets the
            //check out date to that next booking check in date
            //and sets the check-out min date to day after selected check-in
            //the flag is being used so that we can find the first date in the dates occupied array
            //that is later than the desired check in date and then we can determine that our latest check out
            //is the first next date after that
            var flag = false;

            let checkInDateSelected = $('.checkInDatepicker').datepicker('getDate');
            let minCheckoutDate = addDaysToDate(checkInDateSelected, 1);
            $('.checkOutDatepicker').datepicker('setStartDate', minCheckoutDate);
            let checkOutDateSelected = $('.checkOutDatepicker').datepicker('getDate');

            if (checkInDateSelected > checkOutDateSelected) {
                $('.checkOutDatepicker').datepicker('clearDates');
            }

            //this has to be reinitialized every time this function loads beacuse of the splice method
            datesToDisableArray = @Html.Raw(Json.Serialize(Model.DatesOccupiedArray));

            if (typeof datesToDisableArray === "undefined") {
                return;
            } 

            for (var i = 0; i < datesToDisableArray.length; i++) {
                if (!compareDateStrings(dateInput, datesToDisableArray[i]) && !flag) {
                    flag = true;
                }
                else if (!compareDateStrings(dateInput, datesToDisableArray[i]) && flag) {
                    datesToDisableForCheckout = datesToDisableArray.splice(i + 1);

                    //in the checkout datepicker disable all of the dates after the first avaliable the next booking's
                    //check out date so that another free date that is after the following booking can't be selected
                    $('.checkOutDatepicker').datepicker('setDatesDisabled', datesToDisableForCheckout);
                    $('.checkOutDatepicker').datepicker('setEndDate', datesToDisableArray[i-1]);
                    
                    return;
                }
            }
            

            if (compareDateStrings(dateInput, datesToDisableArray[datesToDisableArray.length - 1]) === true
                || compareDateStrings(dateInput, datesToDisableArray[datesToDisableArray.length - 1]) === null) {

                $('.checkOutDatepicker').datepicker('setEndDate', '');
            }
        }

        //accepts two date dd.mm.yyyy. formated strings and returns true if dateString is 
        //later than dateStringToCompareAgainst or null if they are the same
        function compareDateStrings(dateString, dateStringToCompareAgainst) {

            if (dateString === dateStringToCompareAgainst) {
                return null;
            }
            var dateStringSplit = dateString.split(".");
            var dateStringToCompareAgainstSplit = dateStringToCompareAgainst.split(".");


            if (dateStringSplit[2] === dateStringToCompareAgainstSplit[2]) {
                if (dateStringSplit[1] === dateStringToCompareAgainstSplit[1]) {
                    return dateStringSplit[0] > dateStringToCompareAgainstSplit[0];
                }
                else {
                    return dateStringSplit[1] > dateStringToCompareAgainstSplit[1];
                }
            }
            else {
                return dateStringSplit[2] > dateStringToCompareAgainstSplit[2];
            }
        }

        function addDaysToDate(date, numberOfDays) {
            let newDate = new Date(date);
            newDate.setDate(newDate.getDate() + numberOfDays);
            return newDate;
        }
    </script>
}
